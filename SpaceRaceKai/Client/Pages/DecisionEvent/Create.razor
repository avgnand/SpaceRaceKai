@page "/decisionevent/create"
@using SpaceRaceKai.Shared.Models.DecisionEvent
@using SpaceRaceKai.Shared.Models.EventEffect
@inject HttpClient http
@inject NavigationManager navigation

<h3>Create New Decision Event</h3>

@if (errorMessage != null)
{
    <h5>@errorMessage</h5>
}
else
{
    <div class="container-md" style="width: 20rem;">
        <h6>Note</h6>
        <p>Effect changes are displayed in the order "PAWTI" - Population, Approval, Wealth, Tech, and Industry</p>
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <div class="d-flex justify-content-between">
                <label>Name</label>
                <InputText @bind-Value="model.Name" />
            </div>
            <div class="d-flex justify-content-between">
                <label>Description</label>
                <InputText @bind-Value="model.Description" />
            </div>
            <div class="d-flex justify-content-between">
                <label>Event Effect A</label>
                <InputSelect @bind-Value="model.EventEffectIdA">
                    <option value="-1">Select an Effect</option>
                    @foreach (var item in eventEffects)
                    {
                        <option value="@item.Id">
                            @item.PopulationChange/@item.ApprovalChange/@item.WealthChange/@item.TechChange/@item.IndustryChange
                        </option>
                    }
                </InputSelect>
            </div>
            <div class="d-flex justify-content-between">
                <label>Event Effect B</label>
                <InputSelect @bind-Value="model.EventEffectIdB">
                    <option value="-1">Select an Effect</option>
                    @foreach (var item in eventEffects)
                    {
                        <option value="@item.Id">
                            @item.PopulationChange/@item.ApprovalChange/@item.WealthChange/@item.TechChange/@item.IndustryChange
                        </option>
                    }
                </InputSelect>
            </div>
            <button type="submit">Create</button>
        </EditForm>
    </div>
}

@code {
    private string? errorMessage;
    private DecisionEventCreate model = new();

    private List<EventEffectListItem> eventEffects = new();

    protected override async Task OnInitializedAsync()
    {
        eventEffects = await http.GetFromJsonAsync<List<EventEffectListItem>>("/api/eventeffect");
    }

    private async void HandleSubmit()
    {
        var response = await http.PostAsJsonAsync<DecisionEventCreate>("/api/decisionevent", model);
        if (response.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/decisionevent");
        }
        else
        {
            errorMessage = "The decision event could not be created right now. Please try again later.";
        }
    }
}
