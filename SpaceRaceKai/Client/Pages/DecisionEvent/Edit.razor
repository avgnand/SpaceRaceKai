@page "/decisionevent/edit/{DecisionEventId:int}"
@using SpaceRaceKai.Shared.Models.DecisionEvent
@using SpaceRaceKai.Shared.Models.EventEffect
@inject HttpClient http
@inject NavigationManager navigation

<h3>Edit</h3>

@if (errorMessage != null)
{
    <h5>@errorMessage</h5>
}
<div>
    <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
        <div>
            <label>Name</label>
            <InputText @bind-Value="model.Name" />
        </div>
        <div>
            <label>Description</label>
            <InputText @bind-Value="model.Description" />
        </div>
        <div>
            <label>Event Effect A</label>
            <InputSelect @bind-Value="model.EventEffectIdA">
                <option value="-1">Select an Event Effect</option>
                @foreach (var item in eventEffects)
                {
                    <option value="@item.Id">
                        @item.PopulationChange/@item.ApprovalChange/@item.WealthChange/@item.TechChange/@item.IndustryChange
                    </option>
                }
            </InputSelect>
        </div>
        <div>
            <label>Event Effect B</label>
            <InputSelect @bind-Value="model.EventEffectIdB">
                <option value="-1">Select an Event Effect</option>
                @foreach (var item in eventEffects)
                {
                    <option value="@item.Id">
                        @item.PopulationChange/@item.ApprovalChange/@item.WealthChange/@item.TechChange/@item.IndustryChange
                    </option>
                }
            </InputSelect>
        </div>
        <button type="submit">Confirm</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public int DecisionEventId { get; set; }

    private DecisionEventEdit model = new();
    private string? errorMessage;

    private List<EventEffectListItem> eventEffects = new();

    protected override async Task OnInitializedAsync()
    {
        model = await http.GetFromJsonAsync<DecisionEventEdit>($"/api/decisionevent/{DecisionEventId}");
    }

    private async void HandleSubmit()
    {
        var response = await http.PutAsJsonAsync<DecisionEventEdit>($"/api/decisionevent/edit/{DecisionEventId}", model);
        if (response.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/decisionevent/{DecisionEventId}");
        }
        else
        {
            errorMessage = $"Changes to Decision Event '{model.Name}' (ID: {model.Id}) could not be saved.";
        }
    }
}
