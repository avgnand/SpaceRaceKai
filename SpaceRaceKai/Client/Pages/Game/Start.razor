@page "/game/{ColonyId:int}"
@using SpaceRaceKai.Client.Pages.Panels
@using SpaceRaceKai.Shared.Models.Colony
@using SpaceRaceKai.Shared.Models.DecisionEvent
@using SpaceRaceKai.Shared.Models.EventEffect
@using SpaceRaceKai.Shared.Models.WorldEvent
@inject HttpClient http
@inject NavigationManager navigation

@if (errorMessage != null)
{
    <h3>@errorMessage</h3>
}

<div class="container">
    @if (EventsPassed < EventTotal/2)
    {
        <WorldEventPanel Model=@(CurrentWorldEvent) />
    }
    else if (EventsPassed >= EventTotal/2 && EventsPassed < EventTotal)
    {
        <DecisionEventPanel Model=@(CurrentDecisionEvent) />
        <div>
            <button class="btn btn-primary" @onclick="ChooseOptionA">Option A</button>
            <button class="btn btn-primary" @onclick="ChooseOptionB">Option B</button>
        </div>
    }
    @if (EventsPassed < EventTotal/2)
    {
        <button class="btn btn-primary" @onclick="CycleNextEvent">Next</button>
    }
    else if (EventsPassed == EventTotal)
    {
        <div class="container">
            <p>
                Press "Finish" to see the changes made to your colony.
            </p>
            <button class="btn btn-primary" @onclick="FinishGame">Finish</button>
        </div>
    }
</div>


@code {
    [Parameter]
    public int ColonyId { get; set; }

    private ColonyDetail userColony { get; set; } = new();
    private ColonyEdit postGameColony { get; set; } = new();

    // lists of events used in the current game
    private List<WorldEventDetail> gameWorldEvents = new();
    private List<DecisionEventDetail> gameDecisionEvents = new();

    // list of event effects chosen by player
    private List<EventEffectDetail> gameDecisionEffects { get; set; } = new();

    private int EventTotal => gameWorldEvents.Count + gameDecisionEvents.Count;

    // variables to control display of events
    private int EventsPassed { get; set; } = 0;
    private WorldEventDetail CurrentWorldEvent => gameWorldEvents[EventsPassed];
    private DecisionEventDetail CurrentDecisionEvent => gameDecisionEvents[EventsPassed % (EventTotal / 2)];

    private string? errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userColony = await http.GetFromJsonAsync<ColonyDetail>($"/api/colony/{ColonyId}");
        var worldEvents = await http.GetFromJsonAsync<List<WorldEventListItem>>("/api/worldevent");
        var decisionEvents = await http.GetFromJsonAsync<List<DecisionEventListItem>>("/api/decisionevent");

        var randomWorldEvents = ChooseEvents<WorldEventListItem>(5, worldEvents);

        foreach (var item in randomWorldEvents)
        {
            gameWorldEvents.Add(await http.GetFromJsonAsync<WorldEventDetail>($"/api/worldevent/{item.Id}"));
        }

        var randomDecisionEvents = ChooseEvents<DecisionEventListItem>(5, decisionEvents);

        foreach (var item in randomDecisionEvents)
        {
            gameDecisionEvents.Add(await http.GetFromJsonAsync<DecisionEventDetail>($"/api/decisionevent/{item.Id}"));
        }
    }

    private void CycleNextEvent()
    {
        // moves on to next game event
        EventsPassed += 1;
    }

    private async void FinishGame()
    {
        // give values to ColonyEdit model before sending request
        postGameColony.Id = userColony.Id;
        postGameColony.Name = userColony.Name;
        postGameColony.PlanetTypeId = userColony.PlanetTypeId;
        postGameColony.CompletedPlaythrough = true;

        // add game changes to model
        TallyWorldEventChanges();
        TallyDecisionEventChanges();

        // sends put request (edits colony with stat changes)
        var response = await http.PutAsJsonAsync<ColonyEdit>($"/api/colony/edit/{ColonyId}", postGameColony);
        if (response.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/colony/{ColonyId}");
        }
        else
        {
            errorMessage = "There was a problem saving changes.";
        }
    }

    /// <summary>
    /// Choose an amount of unique, random values from a number (total) of integers.
    /// </summary>
    private List<int> ChooseRandomIndices(int amount, int total)
    {
        if (amount <= 0 || amount > total) return new();

        var result = new List<int>();
        var RNG = new Random();
        for (int i = 0; i < amount; i++)
        {
            int index = RNG.Next(total);
            while (result.Contains<int>(index))
            {
                index = RNG.Next(total);
            }
            result.Add(index);
        }

        return result;
    }

    /// <summary>
    /// Choose a certain number of unique, random members from a List of type T.
    /// </summary>
    private List<T> ChooseEvents<T>(int amount, List<T> values)
    {
        var indices = ChooseRandomIndices(amount, values.Count);

        // add values (found at each random index) to result
        List<T> result = new();
        foreach (var i in indices)
        {
            result.Add(values[i]);
        }
        return result;
    }

    private void TallyWorldEventChanges()
    {
        // sum all WE changes
        int totalPopulationChange = 0;
        int totalApprovalChange = 0;
        int totalWealthChange = 0;
        int totalTechChange = 0;
        int totalIndustryChange = 0;
        foreach (var we in gameWorldEvents)
        {
            totalPopulationChange += we.PopulationChange;
            totalApprovalChange += we.ApprovalChange;
            totalWealthChange += we.WealthChange;
            totalTechChange += we.TechChange;
            totalIndustryChange += we.IndustryChange;
        }
        postGameColony.Population += totalPopulationChange;
        postGameColony.ApprovalRating += totalApprovalChange;
        postGameColony.WealthLevel += totalWealthChange;
        postGameColony.TechLevel += totalTechChange;
        postGameColony.IndustryLevel += totalIndustryChange;
    }

    private void TallyDecisionEventChanges()
    {
        // sum all DE changes
        int totalPopulationChange = 0;
        int totalApprovalChange = 0;
        int totalWealthChange = 0;
        int totalTechChange = 0;
        int totalIndustryChange = 0;
        foreach (var eed in gameDecisionEffects)
        {
            totalPopulationChange += eed.PopulationChange;
            totalApprovalChange += eed.ApprovalChange;
            totalWealthChange += eed.WealthChange;
            totalTechChange += eed.TechChange;
            totalIndustryChange += eed.IndustryChange;
        }
        postGameColony.Population += totalPopulationChange;
        postGameColony.ApprovalRating += totalApprovalChange;
        postGameColony.WealthLevel += totalWealthChange;
        postGameColony.TechLevel += totalTechChange;
        postGameColony.IndustryLevel += totalIndustryChange;
    }

    private void ChooseOptionA()
    {
        gameDecisionEffects.Add
        (
            new EventEffectDetail
            {
                PopulationChange = CurrentDecisionEvent.PopulationChangeA,
                ApprovalChange = CurrentDecisionEvent.ApprovalChangeA,
                WealthChange = CurrentDecisionEvent.WealthChangeA,
                TechChange = CurrentDecisionEvent.TechChangeA,
                IndustryChange = CurrentDecisionEvent.IndustryChangeA
            }
        );
        CycleNextEvent();
    }

    private void ChooseOptionB()
    {
        gameDecisionEffects.Add
        (
            new EventEffectDetail
                {
                    PopulationChange = CurrentDecisionEvent.PopulationChangeB,
                    ApprovalChange = CurrentDecisionEvent.ApprovalChangeB,
                    WealthChange = CurrentDecisionEvent.WealthChangeB,
                    TechChange = CurrentDecisionEvent.TechChangeB,
                    IndustryChange = CurrentDecisionEvent.IndustryChangeB
                }
        );
        CycleNextEvent();
    }
}
