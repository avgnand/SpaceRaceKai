@page "/game/{ColonyId:int}"
@using SpaceRaceKai.Client.Pages.Game
@using SpaceRaceKai.Shared.Models.Colony
@using SpaceRaceKai.Shared.Models.DecisionEvent
@using SpaceRaceKai.Shared.Models.WorldEvent
@inject HttpClient http
@inject NavigationManager navigation

@if (errorMessage != null)
{
    <h3>@errorMessage</h3>
}

<div>
    @if (EventsPassed < EventTotal/2)
    {
        <WorldEventPanel Model=@(gameWorldEvents[EventsPassed]) />
    }
    else
    {
        <DecisionEventPanel Model=@(gameDecisionEvents[EventsPassed%(EventTotal/2)]) />
    }
    @if (EventsPassed < EventTotal)
    {
        <button @onclick="CycleNextEvent">Next</button>
    }
    else
    {
        <button @onclick="FinishGame">Finish</button>
    }
</div>

@code {
    [Parameter]
    public int ColonyId { get; set; }

    private ColonyDetail userColony { get; set; } = new();
    private ColonyEdit postGameColony { get; set; } = new();

    // all world events are shown first, then decision events
    // idea: WE and DE components given models from below lists
    private List<WorldEventDetail> gameWorldEvents;
    private List<DecisionEventDetail> gameDecisionEvents;

    private int EventsPassed { get; set; } = 0;
    private int EventTotal => gameWorldEvents.Count + gameDecisionEvents.Count;

    private string? errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userColony = await http.GetFromJsonAsync<ColonyDetail>($"/api/colony/{ColonyId}");
        var worldEvents = await http.GetFromJsonAsync<List<WorldEventListItem>>("/api/worldevent");
        var decisionEvents = await http.GetFromJsonAsync<List<DecisionEventListItem>>("/api/decisionevent");

        List<WorldEventDetail> worldEventDetails = new();
        foreach (var we in worldEvents)
        {
            worldEventDetails.Add(await http.GetFromJsonAsync<WorldEventDetail>($"/api/worldevent/{we.Id}"));
        }

        List<DecisionEventDetail> decisionEventDetails = new();
        foreach (var de in decisionEvents)
        {
            decisionEventDetails.Add(await http.GetFromJsonAsync<DecisionEventDetail>($"/api/decisionevent/{de.Id}"));
        }

        gameWorldEvents = ChooseEvents<WorldEventDetail>(5, worldEventDetails);
        gameDecisionEvents = ChooseEvents<DecisionEventDetail>(5, decisionEventDetails);
    }

    private void CycleNextEvent()
    {
        // moves on to next game event
        EventsPassed += 1;
    }

    private async void FinishGame()
    {
        // TODO: increment colony playthroughs by one
        // sends put request (edits colony with stat changes)
        var response = await http.PutAsJsonAsync<ColonyEdit>($"/api/colony/edit/{ColonyId}", postGameColony);
        if (response.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/colony/{ColonyId}");
        }
        else
        {
            errorMessage = "There was a problem saving changes.";
        }
    }

    /// <summary>
    /// Choose a certain number of unique, random members from a List of type T.
    /// </summary>
    private List<T> ChooseEvents<T>(int amount, List<T> values)
    {
        // Bounds-checking 'amount' argument
        if (amount > values.Count) amount = values.Count;
        if (amount <= 0) return new List<T>();

        // Get unique, random indices within 'values' and add them to a List<int>
        List<int> indices = new();
        var RNG = new Random();
        for (int i = 0; i < amount; i++)
        {
            int index = RNG.Next(values.Count);
            while (indices.Contains(index))
            {
                index = RNG.Next(values.Count);
            }
            indices.Add(index);
        }

        // Add random values (found at each random index) to result
        List<T> result = new();
        foreach (var i in indices)
        {
            result.Add(values[i]);
        }
        return result;
    }

    private void TallyWorldEventChanges(List<WorldEventDetail> events)
    {
        // sum all WE changes
    }
}
